// Generated by delombok at Fri Nov 04 22:13:54 CST 2022
package org.mineacademy.fo;

import org.bukkit.command.CommandSender;
import org.bukkit.entity.Player;
import org.mineacademy.fo.model.Replacer;
import org.mineacademy.fo.remain.Remain;
import org.mineacademy.fo.settings.SimpleSettings;

/**
 * Streamlines the process of sending themed messages to players
 */
public final class Messenger {
	/**
	 * Should we use messenger globally such as in commands & listeners?
	 */
	public static boolean ENABLED = true;
	/**
	 * The prefix send while sending info message
	 */
	private static String infoPrefix = "&8&l[&9&li&8&l]&7 ";
	/**
	 * The prefix send while sending success message
	 */
	private static String successPrefix = "&8&l[&2&l✔&8&l]&7 ";
	/**
	 * The prefix send while sending warning message
	 */
	private static String warnPrefix = "&8&l[&6&l!&8&l]&6 ";
	/**
	 * The prefix send while sending error message
	 */
	private static String errorPrefix = "&8&l[&4&l✕&8&l]&c ";
	/**
	 * The prefix send while sending questions
	 */
	private static String questionPrefix = "&8&l[&a&l?&l&8]&7 ";
	/**
	 * The prefix send while sending announcements
	 */
	private static String announcePrefix = "&8&l[&5&l!&l&8]&d ";

	/**
	 * Send a message prepended with the {@link #getInfoPrefix()}
	 *
	 * @param message
	 */
	public static void broadcastInfo(final String message) {
		for (final Player online : Remain.getOnlinePlayers()) tell(online, infoPrefix, message);
	}

	/**
	 * Send a message prepended with the {@link #getSuccessPrefix()}
	 *
	 * @param message
	 */
	public static void broadcastSuccess(final String message) {
		for (final Player online : Remain.getOnlinePlayers()) tell(online, successPrefix, message);
	}

	/**
	 * Send a message prepended with the {@link #getWarnPrefix()}
	 *
	 * @param message
	 */
	public static void broadcastWarn(final String message) {
		for (final Player online : Remain.getOnlinePlayers()) tell(online, warnPrefix, message);
	}

	/**
	 * Send a message prepended with the {@link #getErrorPrefix()}
	 *
	 * @param message
	 */
	public static void broadcastError(final String message) {
		for (final Player online : Remain.getOnlinePlayers()) tell(online, errorPrefix, message);
	}

	/**
	 * Send a message prepended with the {@link #getQuestionPrefix()}
	 *
	 * @param message
	 */
	public static void broadcastQuestion(final String message) {
		for (final Player online : Remain.getOnlinePlayers()) tell(online, questionPrefix, message);
	}

	/**
	 * Send a message prepended with the {@link #getAnnouncePrefix()}
	 *
	 * @param message
	 */
	public static void broadcastAnnounce(final String message) {
		for (final Player online : Remain.getOnlinePlayers()) tell(online, announcePrefix, message);
	}

	/**
	 * Send a message prepended with the {@link #getInfoPrefix()}
	 *
	 * @param player
	 * @param message
	 */
	public static void info(final CommandSender player, final String message) {
		tell(player, infoPrefix, message);
	}

	/**
	 * Send a message prepended with the {@link #getSuccessPrefix()}
	 *
	 * @param player
	 * @param message
	 */
	public static void success(final CommandSender player, final String message) {
		tell(player, successPrefix, message);
	}

	/**
	 * Send a message prepended with the {@link #getWarnPrefix()}
	 *
	 * @param player
	 * @param message
	 */
	public static void warn(final CommandSender player, final String message) {
		tell(player, warnPrefix, message);
	}

	/**
	 * Send messages prepended with the {@link #getErrorPrefix()}
	 *
	 * @param player
	 * @param messages
	 */
	public static void error(final CommandSender player, final String... messages) {
		for (final String message : messages) error(player, message);
	}

	/**
	 * Send a message prepended with the {@link #getErrorPrefix()}
	 *
	 * @param player
	 * @param message
	 */
	public static void error(final CommandSender player, final String message) {
		tell(player, errorPrefix, message);
	}

	/**
	 * Send a message prepended with the {@link #getQuestionPrefix()}
	 *
	 * @param player
	 * @param message
	 */
	public static void question(final CommandSender player, final String message) {
		tell(player, questionPrefix, message);
	}

	/**
	 * Send a message prepended with the {@link #getAnnouncePrefix()}
	 *
	 * @param player
	 * @param message
	 */
	public static void announce(final CommandSender player, final String message) {
		tell(player, announcePrefix, message);
	}

	/*
	 * Internal method to perform the sending
	 */
	private static void tell(final CommandSender player, final String prefix, String message) {
		// Support localization being none or empty
		if (message.isEmpty() || "none".equals(message)) return;
		final String colorless = Common.stripColors(message);
		boolean noPrefix = ChatUtil.isInteractive(colorless);
		// Special case: Send the prefix for actionbar
		if (colorless.startsWith("<actionbar>")) message = message.replace("<actionbar>", "<actionbar>" + prefix);
		if (colorless.startsWith("@noprefix")) {
			message = message.replace("@noprefix", "");
			noPrefix = true;
		}
		// Only insert prefix if the message is sent through the normal chat
		Common.tellNoPrefix(player, (noPrefix ? "" : prefix) + message);
	}

	/**
	 * Replace {plugin_prefix} and {X_prefix} and {prefix_X} with respective messenger variables
	 * such as {warn_prefix} with {@link #getWarnPrefix()} etc.
	 *
	 * @param message
	 * @return
	 */
	public static String replacePrefixes(String message) {
		return Replacer.replaceArray(message, "plugin_prefix", SimpleSettings.PLUGIN_PREFIX, "info_prefix", infoPrefix, "prefix_info", infoPrefix, "success_prefix", successPrefix, "prefix_success", successPrefix, "warn_prefix", warnPrefix, "prefix_warn", warnPrefix, "error_prefix", errorPrefix, "prefix_error", errorPrefix, "question_prefix", questionPrefix, "prefix_question", questionPrefix, "announce_prefix", announcePrefix, "prefix_announce", announcePrefix);
	}

	@java.lang.SuppressWarnings("all")
	private Messenger() {
		throw new java.lang.UnsupportedOperationException("This is a utility class and cannot be instantiated");
	}

	/**
	 * The prefix send while sending info message
	 */
	@java.lang.SuppressWarnings("all")
	public static void setInfoPrefix(final String infoPrefix) {
		Messenger.infoPrefix = infoPrefix;
	}

	/**
	 * The prefix send while sending info message
	 */
	@java.lang.SuppressWarnings("all")
	public static String getInfoPrefix() {
		return Messenger.infoPrefix;
	}

	/**
	 * The prefix send while sending success message
	 */
	@java.lang.SuppressWarnings("all")
	public static void setSuccessPrefix(final String successPrefix) {
		Messenger.successPrefix = successPrefix;
	}

	/**
	 * The prefix send while sending success message
	 */
	@java.lang.SuppressWarnings("all")
	public static String getSuccessPrefix() {
		return Messenger.successPrefix;
	}

	/**
	 * The prefix send while sending warning message
	 */
	@java.lang.SuppressWarnings("all")
	public static void setWarnPrefix(final String warnPrefix) {
		Messenger.warnPrefix = warnPrefix;
	}

	/**
	 * The prefix send while sending warning message
	 */
	@java.lang.SuppressWarnings("all")
	public static String getWarnPrefix() {
		return Messenger.warnPrefix;
	}

	/**
	 * The prefix send while sending error message
	 */
	@java.lang.SuppressWarnings("all")
	public static void setErrorPrefix(final String errorPrefix) {
		Messenger.errorPrefix = errorPrefix;
	}

	/**
	 * The prefix send while sending error message
	 */
	@java.lang.SuppressWarnings("all")
	public static String getErrorPrefix() {
		return Messenger.errorPrefix;
	}

	/**
	 * The prefix send while sending questions
	 */
	@java.lang.SuppressWarnings("all")
	public static void setQuestionPrefix(final String questionPrefix) {
		Messenger.questionPrefix = questionPrefix;
	}

	/**
	 * The prefix send while sending questions
	 */
	@java.lang.SuppressWarnings("all")
	public static String getQuestionPrefix() {
		return Messenger.questionPrefix;
	}

	/**
	 * The prefix send while sending announcements
	 */
	@java.lang.SuppressWarnings("all")
	public static void setAnnouncePrefix(final String announcePrefix) {
		Messenger.announcePrefix = announcePrefix;
	}

	/**
	 * The prefix send while sending announcements
	 */
	@java.lang.SuppressWarnings("all")
	public static String getAnnouncePrefix() {
		return Messenger.announcePrefix;
	}
}
